// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { AuthorisationDTO } from '@app/model/bw/co/roguesystems/bench/authorisation/authorisation-dto';
import { AuthorisationListDTO } from '@app/model/bw/co/roguesystems/bench/authorisation/authorisation-list-dto';
import { AuthorisationCriteria } from '@app/model/bw/co/roguesystems/bench/authorisation/authorisation-criteria';
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';
import { RestApiResponse } from '@app/model/rest-api-response.model';

@Injectable({
  providedIn: 'root'
})
export class AuthorisationApi {
    
    protected path = '/authorisation';

    private http = inject(HttpClient);

    public findApplicationAuthorisationPaged(applicationId: string | any , pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<AuthorisationListDTO> | any>> {

        return this.http.get<RestApiResponse<Page<AuthorisationListDTO> | any>>(`${this.path}/application/${applicationId}/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public findApplicationAuthorisations(applicationId: string | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/application/${applicationId}`);
    }

    public findAuthorisedApplications(roles: Set<string> | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/applications?roles=${roles}`);
    }

    public findAuthorisedApplicationsPaged(roles: Set<string> | any , pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<AuthorisationListDTO> | any>> {

        return this.http.get<RestApiResponse<Page<AuthorisationListDTO> | any>>(`${this.path}/applications/paged?roles=${roles}&pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public findById(id: string | any ): Observable<RestApiResponse<AuthorisationDTO | any>> {

        return this.http.get<RestApiResponse<AuthorisationDTO | any>>(`${this.path}/${id}`);
    }

    public findByParentAndRoles(parentId: string | any , roles: Set<string> | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/find-by-roles-parent?parentId=${parentId}&roles=${roles}`);
    }

    public findByRolesAndUrl(applicationId: string | any , url: string | any , roles: Set<string> | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/application/${applicationId}/find-by-roles-url?url=${url}&roles=${roles}`);
    }

    public findByRolesAndUrlPaged(applicationId: string | any , url: string | any , roles: Set<string> | any , pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<AuthorisationListDTO> | any>> {

        return this.http.get<RestApiResponse<Page<AuthorisationListDTO> | any>>(`${this.path}/application/${applicationId}/by-roles-url/paged?url=${url}&roles=${roles}&pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public findMyAuthorisedApplications(application: string | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/applications/mine?application=${application}`);
    }

    public findRestrictedViewItems(applicationId: string | any , url: string | any , roles: Set<string> | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/application/${applicationId}/restricted-view-items?url=${url}&roles=${roles}`);
    }

    public getAccessTypeCodeAuthorisations(applicationId: string | any , roles: Set<string> | any , accessPointTypeCodes: Set<string> | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/application/${applicationId}/authorised?roles=${roles}&accessPointTypeCodes=${accessPointTypeCodes}`);
    }

    public getAccessTypeCodeAuthorisationsPaged(applicationId: string | any , roles: Set<string> | any , accessPointTypeCodes: Set<string> | any , pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<AuthorisationListDTO> | any>> {

        return this.http.get<RestApiResponse<Page<AuthorisationListDTO> | any>>(`${this.path}/application/${applicationId}/authorised/paged?roles=${roles}&accessPointTypeCodes=${accessPointTypeCodes}&pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public getAll(): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.get<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}`);
    }

    public getAllPaged(pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<AuthorisationListDTO> | any>> {

        return this.http.get<RestApiResponse<Page<AuthorisationListDTO> | any>>(`${this.path}/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public remove(id: string | any ): Observable<RestApiResponse<boolean | any>> {

        return this.http.delete<RestApiResponse<boolean | any>>(`${this.path}/${id}`);
    }

    public save(authorisation: AuthorisationDTO | any ): Observable<RestApiResponse<AuthorisationDTO | any>> {

        return this.http.post<RestApiResponse<AuthorisationDTO | any>>(`${this.path}`, authorisation);
    }

    public search(criteria: AuthorisationCriteria | any ): Observable<RestApiResponse<AuthorisationListDTO[] | any[]>> {

        return this.http.post<RestApiResponse<AuthorisationListDTO[] | any[]>>(`${this.path}/search`, criteria);
    }

    public searchPaged(criteria: SearchObject<AuthorisationCriteria> | any ): Observable<RestApiResponse<Page<AuthorisationListDTO>[] | any[]>> {

        return this.http.post<RestApiResponse<Page<AuthorisationListDTO>[] | any[]>>(`${this.path}/search/paged`, criteria);
    }

}
