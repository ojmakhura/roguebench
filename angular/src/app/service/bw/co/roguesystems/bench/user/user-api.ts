// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { UserDTO } from '@app/model/bw/co/roguesystems/bench/user/user-dto';
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';
import { RestApiResponse } from '@app/model/rest-api-response.model';

@Injectable({
  providedIn: 'root'
})
export class UserApi {
    
    protected path = '/user';

    private http = inject(HttpClient);

    public addRole(userId: string | any , role: string | any ): Observable<RestApiResponse<boolean | any>> {

        return this.http.put<RestApiResponse<boolean | any>>(`${this.path}/role?userId=${userId}&role=${role}`, {userId: userId, role: role});
    }

    public changePassword(userId: string | any , newPassword: string | any ): Observable<RestApiResponse<string | any>> {

        return this.http.get<RestApiResponse<string | any>>(`${this.path}/updatePassword?userId=${userId}&newPassword=${newPassword}`);
    }

    public findByClientRoles(roles: Set<string> | any , clientId: string | any ): Observable<RestApiResponse<UserDTO[] | any[]>> {

        return this.http.get<RestApiResponse<UserDTO[] | any[]>>(`${this.path}/client/roles?roles=${roles}`);
    }

    public findByDepartmentId(departmentId: string | any ): Observable<RestApiResponse<UserDTO[] | any[]>> {

        return this.http.get<RestApiResponse<UserDTO[] | any[]>>(`${this.path}/department-id?departmentId=${departmentId}`);
    }

    public findByDepartmentName(departmentName: string | any ): Observable<RestApiResponse<UserDTO[] | any[]>> {

        return this.http.get<RestApiResponse<UserDTO[] | any[]>>(`${this.path}/department-name?departmentName=${departmentName}`);
    }

    public findByRealmRoles(roles: Set<string> | any ): Observable<RestApiResponse<UserDTO[] | any[]>> {

        return this.http.get<RestApiResponse<UserDTO[] | any[]>>(`${this.path}/realm/roles?roles=${roles}`);
    }

    public findUserById(userId: string | any ): Observable<RestApiResponse<UserDTO | any>> {

        return this.http.get<RestApiResponse<UserDTO | any>>(`${this.path}?userId=${userId}`);
    }

    public loadUsers(): Observable<RestApiResponse<UserDTO[] | any[]>> {

        return this.http.get<RestApiResponse<UserDTO[] | any[]>>(`${this.path}/load`);
    }

    public removeRole(userId: string | any , role: string | any ): Observable<RestApiResponse<boolean | any>> {

        return this.http.delete<RestApiResponse<boolean | any>>(`${this.path}/role?userId=${userId}&role=${role}`);
    }

    public saveUser(user: UserDTO | any ): Observable<RestApiResponse<UserDTO | any>> {

        return this.http.post<RestApiResponse<UserDTO | any>>(`${this.path}/create`, user);
    }

    public search(criteria: string | any ): Observable<RestApiResponse<UserDTO | any>> {

        return this.http.get<RestApiResponse<UserDTO | any>>(`${this.path}/search?criteria=${criteria}`);
    }

    public updateUserName(userId: string | any , username: string | any ): Observable<RestApiResponse<boolean | any>> {

        return this.http.patch<RestApiResponse<boolean | any>>(`${this.path}/${userId}?username=${username}`, {userId: userId, username: username});
    }

}
