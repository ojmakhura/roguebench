// Generated by andromda-angular cartridge (service\service.impl.ts.vsl) CAN EDIT
import { Injectable, inject } from '@angular/core';
import { Observable } from 'rxjs';
import { ApplicationDTO } from '@app/model/bw/co/roguesystems/bench/application/application-dto';
import { HttpClient } from '@angular/common/http';
import { Page } from '@app/model/page.model';
import { SearchObject } from '@app/model/search-object';
import { RestApiResponse } from '@app/model/rest-api-response.model';

@Injectable({
  providedIn: 'root'
})
export class ApplicationApi {
    
    protected path = '/application';

    private http = inject(HttpClient);

    public findByCode(code: string | any ): Observable<RestApiResponse<ApplicationDTO | any>> {

        return this.http.get<RestApiResponse<ApplicationDTO | any>>(`${this.path}/code/${code}`);
    }

    public findById(id: string | any ): Observable<RestApiResponse<ApplicationDTO | any>> {

        return this.http.get<RestApiResponse<ApplicationDTO | any>>(`${this.path}/${id}`);
    }

    public getAll(): Observable<RestApiResponse<ApplicationDTO[] | any[]>> {

        return this.http.get<RestApiResponse<ApplicationDTO[] | any[]>>(`${this.path}`);
    }

    public getAllPaged(pageNumber: number | any , pageSize: number | any ): Observable<RestApiResponse<Page<ApplicationDTO> | any>> {

        return this.http.get<RestApiResponse<Page<ApplicationDTO> | any>>(`${this.path}/paged?pageNumber=${pageNumber}&pageSize=${pageSize}`);
    }

    public pagedSearch(criteria: SearchObject<string> | any ): Observable<RestApiResponse<Page<ApplicationDTO> | any>> {

        return this.http.post<RestApiResponse<Page<ApplicationDTO> | any>>(`${this.path}/search/paged`, criteria);
    }

    public remove(id: string | any ): Observable<RestApiResponse<boolean | any>> {

        return this.http.delete<RestApiResponse<boolean | any>>(`${this.path}/${id}`);
    }

    public save(application: ApplicationDTO | any ): Observable<RestApiResponse<ApplicationDTO | any>> {

        return this.http.post<RestApiResponse<ApplicationDTO | any>>(`${this.path}`, application);
    }

    public search(criteria: string | any ): Observable<RestApiResponse<ApplicationDTO[] | any[]>> {

        return this.http.get<RestApiResponse<ApplicationDTO[] | any[]>>(`${this.path}/search?criteria=${criteria}`);
    }

}
