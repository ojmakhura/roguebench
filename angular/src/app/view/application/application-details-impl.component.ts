// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, effect, inject } from '@angular/core';
import { ApplicationDetailsComponent } from '@app/view/application/application-details.component';
import { ApplicationDetailsVarsForm } from '@app/view/application/application-details.component';
import { MatRadioChange } from '@angular/material/radio';
import { MatCheckboxChange } from '@angular/material/checkbox';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from "@shared/loader/loader.component";
import { UrlTree } from '@angular/router';
import { AuthorisationApiStore } from '@app/store/bw/co/roguesystems/bench/authorisation/authorisation-api.store';
import { AppEnvStore } from '@app/store/app-env.state';
import { environment } from '@env/environment';
import { ColumnModel } from '@app/model/column.model';
import { AccessPointApiStore } from '@app/store/bw/co/roguesystems/bench/access/access-point-api.store';

@Component({
  selector: 'app-application-details',
  templateUrl: './application-details.component.html',
  styleUrls: ['./application-details.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class ApplicationDetailsImplComponent extends ApplicationDetailsComponent {

  readonly authorisationApiStore = inject(AuthorisationApiStore);
  readonly accessPointStore = inject(AccessPointApiStore);
  readonly authorisationStore = inject(AuthorisationApiStore);
  readonly appStore = inject(AppEnvStore);

  override accessPointsTableColumns: ColumnModel[] = [
    new ColumnModel(
      'name',
      'name',
      false,
    ),
    new ColumnModel(
      'url',
      'url',
      false,
    ),
    new ColumnModel(
      'type',
      'type',
      false,
    ),
  ];

  override authorisationsTableColumns: ColumnModel[] = [
    new ColumnModel(
      'accessPoint',
      'access.point',
      false,
    ),
    new ColumnModel(
      'accessPointUrl',
      'access.point.url',
      false,
    ),
    new ColumnModel(
      'accessPointType',
      'access.point.type',
      false,
    ),
  ];

  constructor() {
    super();

    this.loading = this.applicationApiStore.loading;
    this.success = this.applicationApiStore.success;
    this.error = this.applicationApiStore.error;
    this.loaderMessage = this.applicationApiStore.loaderMessage;
    this.messages = this.applicationApiStore.messages;
    this.applicationApiStore.reset();

    this.accessPointsTableSignal = this.accessPointStore.dataPage;
    this.accessPointsTablePaged = true;

    this.authorisationsTableSignal = this.authorisationStore.dataPage;
    this.authorisationsTablePaged = true;

    effect(() => {
      let application = this.applicationApiStore.data();
      this.applicationDetailsForm.patchValue(application);

      console.log('applicationDetailsForm', application);

      if(application?.id) {
        this.loadDetails();
      }

    });
  }

  override beforeOnInit(form: ApplicationDetailsVarsForm): ApplicationDetailsVarsForm {
    this.route.queryParams.subscribe((params: any) => {
      if (params.id) {
        this.applicationApiStore.findById(params);
      }
    });

    const tree: UrlTree = this.router.parseUrl(this.router.url);
    let cleanUrl = tree.root.children['primary']?.segments.map((it) => it.path).join('/') || '';

    this.authorisationApiStore.findRestrictedViewItems({
      applicationId: environment.applicationCode,
      url: encodeURIComponent(`/${cleanUrl}{`),
      roles: this.appStore.realmRoles().map((role) => role.value),
    });

    return form;
  }

  doNgOnDestroy(): void {
  }

  loadDetails() {
    this.accessPointStore.findApplicationAccessPointsPaged({ applicationId: this.applicationApiStore.data().id, pageNumber: 0, pageSize: 10 });
    this.authorisationApiStore.findApplicationAuthorisationPaged({ applicationId: this.applicationApiStore.data().id, pageNumber: 0, pageSize: 10 });
  }
}
