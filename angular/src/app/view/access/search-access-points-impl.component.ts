// Generated by andromda-angular cartridge (view\view.component.imp.ts.vsl) CAN EDIT!
import { Component, effect, inject } from '@angular/core';
import { SearchAccessPointsComponent } from '@app/view/access/search-access-points.component';
import { SearchAccessPointsVarsForm } from '@app/view/access/search-access-points.component';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { TranslateModule } from '@ngx-translate/core';
import { MaterialModule } from '@app/material.module';
import { TableComponent } from '@app/components/table/table.component';
import { LoaderComponent } from '@app/@shared/loader/loader.component';
import { AppEnvStore } from '@app/store/app-env.state';
import { AuthorisationApiStore } from '@app/store/bw/co/roguesystems/bench/authorisation/authorisation-api.store';
import { UrlTree } from '@angular/router';
import { MatPaginator } from '@angular/material/paginator';
import { SearchObject } from '@app/model/search-object';
import { AccessPointCriteria } from '@app/model/bw/co/roguesystems/bench/access/access-point-criteria';
import { environment } from '@env/environment';
import { AccessPointTypeApiStore } from '@app/store/bw/co/roguesystems/bench/access/type/access-point-type-api.store';
import { AccessPointTypeDTO } from '@app/model/bw/co/roguesystems/bench/access/type/access-point-type-dto';
import { of } from 'rxjs';
import { ApplicationApiStore } from '@app/store/bw/co/roguesystems/bench/application/application-api.store';

@Component({
  selector: 'app-search-access-points',
  templateUrl: './search-access-points.component.html',
  styleUrls: ['./search-access-points.component.scss'],
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    TranslateModule,
    MaterialModule,
    TableComponent,
    LoaderComponent,
  ],
})
export class SearchAccessPointsImplComponent extends SearchAccessPointsComponent {
  private appState = inject(AppEnvStore);
  private authorisationApiStore = inject(AuthorisationApiStore);
  readonly accessPointTypeApiStore = inject(AccessPointTypeApiStore);
  readonly applicationApiStore = inject(ApplicationApiStore);

  constructor() {
    super();
    this.accessPointApiStore.reset();
    this.success = this.accessPointApiStore.success;
    this.loading = this.accessPointApiStore.loading;
    this.error = this.accessPointApiStore.error;
    this.messages = this.accessPointApiStore.messages;
    this.loaderMessage = this.accessPointApiStore.loaderMessage;
    this.accessPointsTablePaged = true;
    this.accessPointsTableSignal = this.accessPointApiStore.dataPage;


    effect(() => {
      this.typeBackingList = this.accessPointTypeApiStore.dataList();
        this.typeFilteredList$ = of(this.typeBackingList);
    });

    effect(() => {
      this.applicationBackingList = this.applicationApiStore.dataList();
      this.applicationFilteredList$ = of(this.applicationBackingList);
    });
  }

  override beforeOnInit(form: SearchAccessPointsVarsForm): SearchAccessPointsVarsForm {
    const tree: UrlTree = this.router.parseUrl(this.router.url);
    let cleanUrl = tree.root.children['primary']?.segments.map((it) => it.path).join('/') || '';

    this.authorisationApiStore.findRestrictedViewItems({
      applicationId: environment.applicationCode,
      url: encodeURIComponent(`/${cleanUrl}{`),
      roles: this.appState.realmRoles().map((role) => role.value),
    });
    return form;
  }

  doNgOnDestroy(): void {}

  override doNgAfterViewInit(): void {
    this.accessPointsTable?.tablePaginator?.page?.subscribe({
      next: (paginator: MatPaginator) => {
        this.doSearch(paginator.pageIndex, paginator.pageSize);
      },
    });
  }

  override beforeSearchAccessPointsSearch(form: any): void {
    this.doSearch();
  }

  private doSearch(pageNumber: number = 0, pageSize: number = 10): void {
    let tmp = this.searchAccessPointsForm.value;

    let criteria = new SearchObject<AccessPointCriteria>();
    criteria.criteria = {};

    if (tmp.name) {
      criteria.criteria.name = tmp.name;
    }

    if (tmp.url) {
      criteria.criteria.url = tmp.url;
    }

    if (tmp.type) {
      criteria.criteria.typeId = tmp.type.id;
    }

    if(tmp.application) {
      criteria.criteria.applicationId = tmp.application.id;
    }

    criteria.pageNumber = pageNumber;
    criteria.pageSize = pageSize;

    this.accessPointApiStore.pagedSearch({ criteria: criteria });
  }

  override filterType(): void {
    this.accessPointTypeApiStore.search({ criteria: this.typeFilterCtrl.value ? this.typeFilterCtrl.value : '' });
  }

  override typeCompare(o1: AccessPointTypeDTO | any, o2: AccessPointTypeDTO | any) {
    return o1 && o2 ? o1.id === o2.id : false;
  }

  override filterApplication(): void {
    this.applicationApiStore.search({ criteria: this.applicationFilterCtrl.value ? this.applicationFilterCtrl.value : '' });
  }

  override applicationCompare(o1: any, o2: any) {
    return o1 && o2 ? o1.id === o2.id : false;
  }
}
