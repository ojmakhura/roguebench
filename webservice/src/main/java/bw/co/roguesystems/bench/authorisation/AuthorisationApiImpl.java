// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.roguesystems.bench.authorisation;

import bw.co.roguesystems.bench.AuditTracker;
import bw.co.roguesystems.bench.RestApiResponse;
import bw.co.roguesystems.bench.SearchObject;
import bw.co.roguesystems.bench.keycloak.KeycloakService;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.persistence.EntityNotFoundException;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Collection;

import org.apache.commons.lang3.StringUtils;
import org.keycloak.adapters.jaas.AbstractKeycloakLoginModule.Auth;
import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/authorisation")
@CrossOrigin()
@Tag(name = "Authorisation", description = "Managing the access authorisations.")
public class AuthorisationApiImpl extends AuthorisationApiBase {
    
    private final KeycloakService keycloakService;

    public AuthorisationApiImpl(AuthorisationService authorisationService, KeycloakService keycloakService) {

        super(authorisationService);
        this.keycloakService = keycloakService;
    }

    @Override
    public ResponseEntity<RestApiResponse<AuthorisationDTO>> handleFindById(String id) {
        RestApiResponse<AuthorisationDTO> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Authorisation by Id " + id);
            AuthorisationDTO data = this.authorisationService.findById(id);
            
            if (data != null) {
                responseData.setData(data);
                responseData.setSuccess(true);
                responseData.setMessage("Authorisation found successfully.");
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Authorisation with id %s not found.", id));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            e.printStackTrace();
            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Authorisation with id %s not found.", id));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            } else {
                message = "Unknown error encountered. Please contact administrator.";
            }

            logger.error(message);
            responseData.setSuccess(false);
            responseData.setMessage(message);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleFindByRolesAndUrl(String applicationId, String url, Set<String> roles) {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for an Authorisation by " + "Url: " + url + " and Roles: " + roles);
            Collection<AuthorisationListDTO> data = authorisationService.findByRolesAndUrl(applicationId, url, roles);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisations found successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AuthorisationListDTO>>> handleFindByRolesAndUrlPaged(String applicationId, String url, Set<String> roles, Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for an Authorisation by " + "Url: " + url + " and Roles: " + roles);
            Page<AuthorisationListDTO> data = authorisationService.findByRolesAndUrl(applicationId, url, roles, pageNumber, pageSize);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisations page found successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleFindRestrictedViewItems(String applicationId, String url, Set<String> roles) {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            
            Collection<String> restrictedUrls = new ArrayList<>();

            Collection<AuthorisationListDTO> restrictedViewItems = authorisationService.findByUrlPrefixAndRoles(applicationId, url, roles);

            restrictedViewItems.forEach(r -> {
                restrictedUrls.add(r.getAccessPointUrl());
            });

            // Note: Base class expects Collection<AuthorisationListDTO> but we're returning Collection<String>
            // This may need review - returning the actual AuthorisationListDTO collection instead
            responseData.setData(restrictedViewItems);
            responseData.setSuccess(true);
            responseData.setMessage("Restricted view items found successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleGetAccessTypeCodeAuthorisations(String applicationId, Set<String> roles,
            Set<String> accessPointTypeCodes) {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Displays Authorisation by specified roles: " + roles + " and Access Point Type Code: "
                    + accessPointTypeCodes);

            roles.add("UNSECURED");
            Collection<AuthorisationListDTO> data = authorisationService.getAccessTypeCodeAuthorisations(applicationId, roles, accessPointTypeCodes);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access type code authorisations retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("An unknown error has occured. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AuthorisationListDTO>>> handleGetAccessTypeCodeAuthorisationsPaged(String applicationId, Set<String> roles,
            Set<String> accessPointTypeCodes, Integer pageNumber, Integer pageSize) {
        RestApiResponse<Page<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            roles.add("UNSECURED");
            Page<AuthorisationListDTO> data = authorisationService.getAccessTypeCodeAuthorisations(applicationId, roles,
                    accessPointTypeCodes, pageNumber, pageSize);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access type code authorisations page retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleGetAll() {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {

            logger.debug("Displays all Authorisations");
            Collection<AuthorisationListDTO> data = this.authorisationService.getAll();
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("All authorisations retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AuthorisationListDTO>>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        RestApiResponse<Page<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug(
                    "Displays all Authoristions by specified Page Number: " + pageNumber + ", Page Size: " + pageSize);
            Page<AuthorisationListDTO> data = authorisationService.getAll(pageNumber, pageSize);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisations page retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        try {
            logger.debug("Deletes an Authorisation by Id" + id);
            Boolean data = this.authorisationService.remove(id);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisation removed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());

            if (e instanceof EmptyResultDataAccessException || e.getCause() instanceof EmptyResultDataAccessException) {
                responseData.setSuccess(false);
                responseData.setMessage("Could not delete authorisation with id " + id);
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);

            } else if (e.getMessage().contains("is in use") || e.getCause().getMessage().contains("is in use")) {
                responseData.setSuccess(false);
                responseData.setMessage("This authorisation is in use and cannot be deleted.");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }

            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered when deleting authorisation with id " + id);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<AuthorisationDTO>> handleSave(AuthorisationDTO authorisation) {
        RestApiResponse<AuthorisationDTO> responseData = new RestApiResponse<>();
        try {
            logger.debug("Saves Authorisation " + authorisation);

            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            AuditTracker.auditTrail(authorisation, authentication);

            AuthorisationDTO data = authorisationService.save(authorisation);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisation saved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (IllegalArgumentException | AuthorisationServiceException e) {

            e.printStackTrace();

            String message = e.getMessage();

            if (e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if (message.contains("'authorisation'")) {

                    message = "Authorisation information is missing.";

                } else if (message.contains("or its id can not be null")
                        || message.contains("'authorisation.accessPoint' can not be null")) {

                    message = "The access point or its id is missing.";

                } else {
                    message = "Unknown error encountered. Please contact administrator.";
                }

                responseData.setSuccess(false);
                responseData.setMessage(message);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);

            } else if (e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if (e.getCause().getMessage().contains("(access_point_fk)")) {

                        responseData.setSuccess(false);
                        responseData.setMessage("Authorisation for this access point has already been created. Please edit it instead.");
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
                    }
                } else if (e.getCause().getMessage().contains("null value in column")) {

                    if (e.getCause().getMessage().contains("column \"created_by\"")) {
                        responseData.setSuccess(false);
                        responseData.setMessage("The created-by value is missing.");
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
                    } else if (e.getCause().getMessage().contains("column \"created_date\"")) {
                        responseData.setSuccess(false);
                        responseData.setMessage("The created date value is missing.");
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
                    }

                }

                responseData.setSuccess(false);
                responseData.setMessage("An unknown database error has occured. Please contact the administrator.");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
            }

            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        } catch (Exception e) {

            e.printStackTrace();
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleSearch(AuthorisationCriteria criteria) {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.info("Searche for an Authorisation by criteria " + criteria);

            Collection<AuthorisationListDTO> data = authorisationService.search(criteria, null);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisation search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            logger.error(e.getMessage());
            e.printStackTrace();
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<Page<AuthorisationListDTO>>>> handleSearchPaged(SearchObject<AuthorisationCriteria> criteria) {
        RestApiResponse<Collection<Page<AuthorisationListDTO>>> responseData = new RestApiResponse<>();
        try {

            // Note: Service returns Page but base class expects Collection<Page> - this may need review
            Page<AuthorisationListDTO> pageData = authorisationService.search(criteria);
            Collection<Page<AuthorisationListDTO>> data = Collections.singletonList(pageData);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisation paged search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            e.printStackTrace();
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AuthorisationListDTO>>> handleFindApplicationAuthorisationPaged(String applicationId, Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for an Authorisation by Application Id " + applicationId);
            Page<AuthorisationListDTO> data = this.authorisationService.findApplicationAuthorisations(applicationId, pageNumber, pageSize);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Application authorisations page found successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Authorisation with application id %s not found.", applicationId));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            } else {
                message = "Unknown error encountered. Please contact administrator.";
            }

            logger.error(message);
            responseData.setSuccess(false);
            responseData.setMessage(message);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleFindApplicationAuthorisations(String applicationId) {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for an Authorisation by Application Id " + applicationId);
            Collection<AuthorisationListDTO> data = this.authorisationService.findApplicationAuthorisations(applicationId);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Application authorisations found successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            String message = e.getMessage();
            if (e instanceof NoSuchElementException || e.getCause() instanceof NoSuchElementException
                    || e instanceof EntityNotFoundException || e.getCause() instanceof EntityNotFoundException) {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Authorisation with application id %s not found.", applicationId));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            } else {
                message = "Unknown error encountered. Please contact administrator.";
            }

            logger.error(message);
            responseData.setSuccess(false);
            responseData.setMessage(message);
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleFindAuthorisedApplications(Set<String> roles) {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Authorisation by roles " + roles);
            Collection<AuthorisationListDTO> data = authorisationService.findAuthorisedApplications(null, roles);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorised applications found successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AuthorisationListDTO>>> handleFindAuthorisedApplicationsPaged(Set<String> roles, Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Authorisation by roles " + roles);
            Page<AuthorisationListDTO> data = authorisationService.findAuthorisedApplications(null, roles, pageNumber, pageSize);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorised applications page found successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleFindMyAuthorisedApplications(String application) {

        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

        List<String> t= authentication.getAuthorities()
                .stream()
                .map(GrantedAuthority::getAuthority)
                .collect(Collectors.toList());

        AuthorisationCriteria criteria = new AuthorisationCriteria();
        criteria.setApplication(application);
        criteria.setRoles(t);
        criteria.setAccessPointType("APP");

        return this.search(criteria);
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AuthorisationListDTO>>> handleFindByParentAndRoles(String parentId, Set<String> roles) {
        RestApiResponse<Collection<AuthorisationListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Authorisation by Parent Id " + parentId + " and Roles: " + roles);
            Collection<AuthorisationListDTO> data = authorisationService.findByParentAndRoles(parentId, roles);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Authorisations found by parent and roles successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);

        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("Unknown error encountered. Please contact administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

}