// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.roguesystems.bench.application;

import bw.co.roguesystems.bench.AuditTracker;
import bw.co.roguesystems.bench.RestApiResponse;
import bw.co.roguesystems.bench.SearchObject;
import io.swagger.v3.oas.annotations.tags.Tag;
import java.util.Collection;
import org.springframework.data.domain.Page;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/application")
@CrossOrigin()
@Tag(name = "Application Management", description = "Managing applications.")
public class ApplicationApiImpl extends ApplicationApiBase {
    
    public ApplicationApiImpl(
        ApplicationService applicationService    ) {
        
        super(
            applicationService        );
    }


    @Override
    public ResponseEntity<RestApiResponse<ApplicationDTO>> handleFindById(String id) {
        RestApiResponse<ApplicationDTO> responseData = new RestApiResponse<>();
        try {
            ApplicationDTO data = applicationService.findById(id);
            if(data != null) {
                responseData.setData(data);
                responseData.setSuccess(true);
                responseData.setMessage("Application found successfully.");
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage("Application not found.");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<ApplicationDTO>>> handleGetAll() {
        RestApiResponse<Collection<ApplicationDTO>> responseData = new RestApiResponse<>();
        try {
            Collection<ApplicationDTO> data = applicationService.getAll();
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Applications retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<ApplicationDTO>>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        RestApiResponse<Page<ApplicationDTO>> responseData = new RestApiResponse<>();
        try {
            Page<ApplicationDTO> data = applicationService.getAll(pageNumber, pageSize);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Applications page retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<ApplicationDTO>>> handlePagedSearch(SearchObject<String> criteria) {
        RestApiResponse<Page<ApplicationDTO>> responseData = new RestApiResponse<>();
        try {
            Page<ApplicationDTO> data = applicationService.search(criteria);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Application search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        try {
            Boolean data = applicationService.remove(id);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Application removed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<ApplicationDTO>> handleSave(ApplicationDTO application) {
        RestApiResponse<ApplicationDTO> responseData = new RestApiResponse<>();
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            AuditTracker.auditTrail(application, authentication);
            ApplicationDTO data = applicationService.save(application);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Application saved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<ApplicationDTO>>> handleSearch(String criteria) {
        RestApiResponse<Collection<ApplicationDTO>> responseData = new RestApiResponse<>();
        try {
            Collection<ApplicationDTO> data = applicationService.search(criteria, null);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Application search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }


    @Override
    public ResponseEntity<RestApiResponse<ApplicationDTO>> handleFindByCode(String code) {
        RestApiResponse<ApplicationDTO> responseData = new RestApiResponse<>();
        try {
            ApplicationDTO data = applicationService.findByCode(code);
            if(data != null) {
                responseData.setData(data);
                responseData.setSuccess(true);
                responseData.setMessage("Application found by code successfully.");
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage("Application not found.");
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }
}