// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.roguesystems.bench.access;

import bw.co.roguesystems.bench.AuditTracker;
import bw.co.roguesystems.bench.RestApiResponse;
import bw.co.roguesystems.bench.SearchObject;
import bw.co.roguesystems.bench.keycloak.KeycloakService;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.persistence.EntityNotFoundException;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/access")
@CrossOrigin()
@Tag(name = "Access Point", description = "Managing the different resources available.")
public class AccessPointApiImpl extends AccessPointApiBase {
    
    private final KeycloakService keycloakService;

    public AccessPointApiImpl(
        AccessPointService accessPointService , KeycloakService keycloakService   ) {
        
        super(
            accessPointService        );
            this.keycloakService = keycloakService;
    }


    @Override
    public ResponseEntity<RestApiResponse<AccessPointDTO>> handleFindById(String id) {
        RestApiResponse<AccessPointDTO> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Access Point using ID "+id);
            Optional<AccessPointDTO> data = Optional.of(accessPointService.findById(id));
            
            if(data.isPresent()) {
                responseData.setData(data.get());
                responseData.setSuccess(true);
                responseData.setMessage(String.format("Access Point %s found.", data.get().getName()));
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Access point with id %s not found.", id));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AccessPointListDTO>>> handleGetAll() {
        RestApiResponse<Collection<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Displays all Access Points");
            Collection<AccessPointListDTO> data = accessPointService.getAll();
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Points retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AccessPointListDTO>>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        RestApiResponse<Page<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Displays all Access Points of the specified "+"Page number: "+pageNumber +"and Page size: " +pageSize);
            Page<AccessPointListDTO> data = accessPointService.getAll(pageNumber, pageSize);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Points retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AccessPointListDTO>>> handlePagedSearch(SearchObject<AccessPointCriteria> criteria) {
        RestApiResponse<Page<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for an Access Point of the specified Page Number: " + criteria.getPageNumber() + ", Page Size: " + criteria.getPageSize() + " and Criteria: " +criteria);
            Page<AccessPointListDTO> data = accessPointService.search(criteria);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Points search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        try {
            logger.debug("Deletes Access Point by ID " + id);
            boolean rm = accessPointService.remove(id);
            
            if(rm) {
                responseData.setData(rm);
                responseData.setSuccess(true);
                responseData.setMessage(String.format("Access Point with id %s deleted successfully.", id));
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Failed to delete the access point with id %s.", id));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<AccessPointDTO>> handleSave(AccessPointDTO accessPoint) {
        RestApiResponse<AccessPointDTO> responseData = new RestApiResponse<>();
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            AuditTracker.auditTrail(accessPoint, authentication);
            Optional<AccessPointDTO> data = Optional.of(accessPointService.save(accessPoint)); // TODO: Add custom code here;
            responseData.setData(data.get());
            responseData.setSuccess(true);
            responseData.setMessage(String.format("Access Point %s saved.", responseData.getData().getName()));
            ResponseEntity<RestApiResponse<AccessPointDTO>> response = ResponseEntity.status(HttpStatus.OK).body(responseData);

            return response;
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }


    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AccessPointListDTO>>> handleSearch(AccessPointCriteria criteria) {
        RestApiResponse<Collection<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.info("Searches for an Access Point by criteria " + criteria);
            Collection<AccessPointListDTO> data = accessPointService.search(criteria == null ? new AccessPointCriteria() : criteria, null);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Points search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Page<AccessPointListDTO>>> handlePagedSearchOr(SearchObject<AccessPointCriteria> criteria) {
        RestApiResponse<Page<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for an Access Point of the specified Page Number: " + criteria.getPageNumber() + ", Page Size: " + criteria.getPageSize() + " and Criteria: " +criteria);
            Page<AccessPointListDTO> data = accessPointService.searchOr(criteria);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Points OR search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }


    @Override
    public ResponseEntity<RestApiResponse<Collection<AccessPointListDTO>>> handleSearchOr(AccessPointCriteria criteria) {
        RestApiResponse<Collection<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.info("Searches for an Access Point by criteria " + criteria);
            Collection<AccessPointListDTO> data = accessPointService.searchOr(criteria == null ? new AccessPointCriteria() : criteria, null);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Points OR search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }


    @Override
    public ResponseEntity<RestApiResponse<Collection<AccessPointListDTO>>> handleFindApplicationAccessPoints(String applicationId) {
        RestApiResponse<Collection<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Access Point using Application ID "+applicationId);
            Optional<Collection<AccessPointListDTO>> data = Optional.of(accessPointService.findApplicationAccessPoints(applicationId));
            
            if(data.isPresent()) {
                responseData.setData(data.get());
                responseData.setSuccess(true);
                responseData.setMessage(String.format("Access Points for application %s found.", applicationId));
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Access point with application id %s not found.", applicationId));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }


    @Override
    public ResponseEntity<RestApiResponse<Page<AccessPointListDTO>>> handleFindApplicationAccessPointsPaged(String applicationId, Integer pageNumber,
            Integer pageSize) {
        RestApiResponse<Page<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Access Point using Application ID "+applicationId + " Page number: "+pageNumber +"and Page size: " +pageSize);
            Optional<Page<AccessPointListDTO>> data = Optional.of(accessPointService.findApplicationAccessPoints(applicationId, pageNumber, pageSize));
            
            if(data.isPresent()) {
                responseData.setData(data.get());
                responseData.setSuccess(true);
                responseData.setMessage(String.format("Access Points for application %s found.", applicationId));
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Access point with application id %s not found.", applicationId));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }


    @Override
    public ResponseEntity<RestApiResponse<Collection<AccessPointListDTO>>> handleFindByParent(String parentId) {
        RestApiResponse<Collection<AccessPointListDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Access Point using Parent ID "+parentId);
            Optional<Collection<AccessPointListDTO>> data = Optional.of(accessPointService.findByParent(parentId));
            
            if(data.isPresent()) {
                responseData.setData(data.get());
                responseData.setSuccess(true);
                responseData.setMessage(String.format("Access Points with parent %s found.", parentId));
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Access point with parent id %s not found.", parentId));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }
}