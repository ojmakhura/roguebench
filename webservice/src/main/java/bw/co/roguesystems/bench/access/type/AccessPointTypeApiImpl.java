// license-header java merge-point
//
// Attention: Generated code! Do not modify by hand!
// Generated by SpringWSImpl.java.vsl in andromda-webservices.
//
package bw.co.roguesystems.bench.access.type;

import bw.co.roguesystems.bench.AuditTracker;
import bw.co.roguesystems.bench.RestApiResponse;
import bw.co.roguesystems.bench.SearchObject;
import bw.co.roguesystems.bench.keycloak.KeycloakService;
import io.swagger.v3.oas.annotations.tags.Tag;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.NoSuchElementException;
import java.util.Optional;

import org.apache.commons.lang3.StringUtils;
import org.postgresql.util.PSQLException;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/access/type")
@CrossOrigin()
@Tag(name = "Access Point Type", description = "Configuring different resource types accessible.")
public class AccessPointTypeApiImpl extends AccessPointTypeApiBase {
    private final KeycloakService keycloakService;
    
    public AccessPointTypeApiImpl(AccessPointTypeService accessPointTypeService, KeycloakService keycloakService) {
        
        super(accessPointTypeService);
        this.keycloakService = keycloakService;
    }

    @Override
    public ResponseEntity<RestApiResponse<AccessPointTypeDTO>> handleFindById(String id) {
        RestApiResponse<AccessPointTypeDTO> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Access Point Type using ID " + id);
            AccessPointTypeDTO type = accessPointTypeService.findById(id);

            if(type != null && type.getId() != null) {
                responseData.setData(type);
                responseData.setSuccess(true);
                responseData.setMessage(String.format("Access Point Type %s found.", type.getName()));
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Access point type with id %s not found.", id));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AccessPointTypeDTO>>> handleGetAll() {
        RestApiResponse<Collection<AccessPointTypeDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Displays all Access Point Types");
            Collection<AccessPointTypeDTO> data = accessPointTypeService.getAll();
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Point Types retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<AccessPointTypeDTO>> handleGetAllPaged(Integer pageNumber, Integer pageSize) {
        RestApiResponse<AccessPointTypeDTO> responseData = new RestApiResponse<>();
        try {
            logger.debug("Displays all Access Point Types of the specified Page number: " + pageNumber + "and Page size: " + pageSize);
            // Note: The base class expects AccessPointTypeDTO but service returns Page - this may need review
            Object data = accessPointTypeService.getAll(pageNumber, pageSize);
            responseData.setData((AccessPointTypeDTO) data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Point Types retrieved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<AccessPointTypeDTO>> handlePagedSearch(SearchObject<String> criteria) {
        RestApiResponse<AccessPointTypeDTO> responseData = new RestApiResponse<>();
        try {
            // Note: Service returns Page but base class expects AccessPointTypeDTO - this needs review
            Object data = accessPointTypeService.search(criteria);
            responseData.setData((AccessPointTypeDTO) data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Point Types search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Boolean>> handleRemove(String id) {
        RestApiResponse<Boolean> responseData = new RestApiResponse<>();
        try {
            logger.debug("Deletes Access Point Type by ID " +id);
            boolean rm = accessPointTypeService.remove(id);
            
            if(rm) {
                responseData.setData(rm);
                responseData.setSuccess(true);
                responseData.setMessage(String.format("Access Point Type with id %s deleted successfully.", id));
                return ResponseEntity.status(HttpStatus.OK).body(responseData);
            } else {
                responseData.setSuccess(false);
                responseData.setMessage(String.format("Failed to delete the access point type with id %s.", id));
                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(responseData);
            }
        } catch (Exception e) {
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage(e.getMessage());
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<AccessPointTypeDTO>> handleSave(AccessPointTypeDTO accessPointType) {
        RestApiResponse<AccessPointTypeDTO> responseData = new RestApiResponse<>();
        try {
                        
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            AuditTracker.auditTrail(accessPointType, authentication);

            logger.debug("Saves Access Point Type "+accessPointType );
            AccessPointTypeDTO data = accessPointTypeService.save(accessPointType);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Point Type saved successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (AccessPointTypeServiceException | IllegalArgumentException e) {

            String message = e.getMessage();
            if(e instanceof IllegalArgumentException || e.getCause() instanceof IllegalArgumentException) {

                if(message.contains("'accessPointType'")) {

                    message = "The access point type information is missing.";

                } else if(message.contains("'accessPointType.code'")) {

                    message = "The access point type code is missing.";

                } else if(message.contains("'accessPointType.name'")) {

                    message = "The access point type name is missing.";

                } else {
                    message = "An unknown error has occured. Please contact the system administrator.";
                }
                
                responseData.setSuccess(false);
                responseData.setMessage(message);
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);

            } else if(e.getCause() instanceof PSQLException) {

                if (e.getCause().getMessage().contains("duplicate key")) {
                    if(e.getCause().getMessage().contains("(code)")) {

                        responseData.setSuccess(false);
                        responseData.setMessage("This access point type with this code has been already created.");
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);

                    } else if(e.getCause().getMessage().contains("(name)")) {

                        responseData.setSuccess(false);
                        responseData.setMessage("This access point type with this name has been already created.");
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
                    } else {
                        responseData.setSuccess(false);
                        responseData.setMessage("This access point type is conflicting with an existing one.");
                        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
                    }
                }
                
                responseData.setSuccess(false);
                responseData.setMessage("This access point type is conflicting with an existing one.");
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
            }

            responseData.setSuccess(false);
            responseData.setMessage("An unknown error has occured. Please contact the portal administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        } catch(Exception e) {

            e.printStackTrace();
            e.getCause().printStackTrace();
            responseData.setSuccess(false);
            responseData.setMessage("An unknown error has occured. Please contact the portal administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }

    @Override
    public ResponseEntity<RestApiResponse<Collection<AccessPointTypeDTO>>> handleSearch(String criteria) {
        RestApiResponse<Collection<AccessPointTypeDTO>> responseData = new RestApiResponse<>();
        try {
            logger.debug("Searches for Access Point Type by criteria "+ criteria);
            Collection<AccessPointTypeDTO> data = accessPointTypeService.search(criteria, null);
            responseData.setData(data);
            responseData.setSuccess(true);
            responseData.setMessage("Access Point Type search completed successfully.");
            return ResponseEntity.status(HttpStatus.OK).body(responseData);
        } catch (Exception e) {
            e.printStackTrace();
            logger.error(e.getMessage());
            responseData.setSuccess(false);
            responseData.setMessage("An unknown error has occurred. Please contact the site administrator.");
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(responseData);
        }
    }
}